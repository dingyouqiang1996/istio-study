# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import wind_pb2 as wind__pb2


class WindServerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.wind_predict = channel.unary_unary(
                '/wind_power.WindServer/wind_predict',
                request_serializer=wind__pb2.Request.SerializeToString,
                response_deserializer=wind__pb2.Response.FromString,
                )
        self.send_data = channel.unary_unary(
                '/wind_power.WindServer/send_data',
                request_serializer=wind__pb2.Request.SerializeToString,
                response_deserializer=wind__pb2.Response.FromString,
                )


class WindServerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def wind_predict(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def send_data(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WindServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'wind_predict': grpc.unary_unary_rpc_method_handler(
                    servicer.wind_predict,
                    request_deserializer=wind__pb2.Request.FromString,
                    response_serializer=wind__pb2.Response.SerializeToString,
            ),
            'send_data': grpc.unary_unary_rpc_method_handler(
                    servicer.send_data,
                    request_deserializer=wind__pb2.Request.FromString,
                    response_serializer=wind__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'wind_power.WindServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class WindServer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def wind_predict(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/wind_power.WindServer/wind_predict',
            wind__pb2.Request.SerializeToString,
            wind__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def send_data(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/wind_power.WindServer/send_data',
            wind__pb2.Request.SerializeToString,
            wind__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
