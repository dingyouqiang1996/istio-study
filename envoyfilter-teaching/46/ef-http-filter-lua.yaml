apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: apply-to
spec:
  workloadSelector:
    labels:
      app: productpage
  configPatches:
  - applyTo: HTTP_FILTER
    match:
      context: SIDECAR_INBOUND
      listener:
        portNumber: 9080
        filterChain:
          filter:
            name: "envoy.filters.network.http_connection_manager"
            subFilter:
              name: "envoy.filters.http.router"
    patch:
      operation: INSERT_BEFORE
      value: 
       name: envoy.filters.http.lua
       typed_config:
          "@type": "type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua"
          inlineCode: |
                   -- local cjson = require "cjson"
                   
                   local function decodeBase64(str64)
                        local b64chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
                        local temp={}
                        for i=1,64 do
                            temp[string.sub(b64chars,i,i)] = i
                        end
                        temp['=']=0
                        local str=""
                        for i=1,#str64,4 do
                            if i>#str64 then
                                break
                            end
                            local data = 0
                            local str_count=0
                            for j=0,3 do
                                local str1=string.sub(str64,i+j,i+j)
                                if not temp[str1] then
                                    return
                                end
                                if temp[str1] < 1 then
                                    data = data * 64
                                else
                                    data = data * 64 + temp[str1]-1
                                    str_count = str_count + 1
                                end
                            end
                            for j=16,0,-8 do
                                if str_count > 0 then
                                    str=str..string.char(math.floor(data/math.pow(2,j)))
                                    data=math.mod(data,math.pow(2,j))
                                    str_count = str_count - 1
                                end
                            end
                        end

                        local last = tonumber(string.byte(str, string.len(str), string.len(str)))
                        if last == 0 then
                            str = string.sub(str, 1, string.len(str) - 1)
                        end
                        return str
                    end

                   function envoy_on_request(handle)
                      handle:logWarn(" ============= envoy_on_request ============= ")
                      local headers = handle:headers()
                      local authToken = headers:get("auth")
                      handle:logWarn(authToken)
                     -- local decoded=decodeBase64(authToken)
                     -- handle:logWarn(decoded)
                     -- local data = cjson.decode(decoded)
                     -- local userId=data["userId"]
                      local headers, body = handle:httpCall(
                          "outbound|8080||auth-simple.istio.svc.cluster.local",
                          {
                            [":method"] = "GET",
                            [":path"] = "/auth",
                            [":authority"] = "auth-simple:8080",
                            ["userId"] = "aaa"
                          },
                          "",
                          8080)
                          if(body=="fail")
                          then
                              handle:respond(
                                {[":status"] = "403",
                                 ["upstream_foo"] = headers["foo"]},
                                "nope")
                          end
                         
                      handle:logWarn(" ============================================= ")
                    end
            
